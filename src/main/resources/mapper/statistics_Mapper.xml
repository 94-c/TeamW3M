<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="StatisticsDAO">
	
	<select id="salesByGender" resultType="StatisticsVO">
	select um.user_gender, count(*) as user_count, sum(pa.pay_total_money) as total_sum
	from order_list ol , pay pa ,user_member um
	where ol.order_seq = pa.order_seq and ol.user_id = um.user_id and ol.order_status = '구매확정' 
	
	group by um.user_gender ;
	</select>
	
	<select id="salesByMonth" resultType="StatisticsVO">
	<![CDATA[
	select  sum(pa.pay_total_money) as total_sum,sum(pa.pay_use_point) as total_use_point, to_char(ol.order_date,'YYYY-MM-DD') as date_total 
	from order_list ol , pay pa ,user_member um
	where ol.order_seq = pa.order_seq and ol.user_id = um.user_id and ol.order_status = '구매확정' and ol.order_date >= #{StartDate} and ol.order_date <= #{endDate}
	group by date_total
	order by date_total
	]]>
	</select>
	
	<select id="todaySales" resultType="StatisticsVO" >
	select sum(pa.pay_total_money) as total_sum
	from order_list ol , pay pa ,user_member um,to_char(ol.order_date,'YYYY-MM-DD') as date_total
	where ol.order_seq = pa.order_seq and ol.user_id = um.user_id and ol.order_status = '구매확정' and date_total = to_char(now(),'YYYY-MM-DD')
	</select>
	
	<select id="todayJoin" resultType="StatisticsVO">
	select count(*) as join_count
	from user_member 
	where to_char(user_join_date,'YYYY-MM-DD') = to_char(now(),'YYYY-MM-DD');
	</select>
	<select id="todayProdAmount" resultType="StatisticsVO">
	select sum(op.prod_amount) as prod_count
	from order_list ol , pay pa,order_prod op ,user_member um,to_char(ol.order_date,'YYYY-MM-DD') as date_total
	where ol.order_seq = pa.order_seq and ol.order_seq = op.order_seq and ol.user_id = um.user_id 
	and ol.order_status = '구매확정' and date_total = to_char(now(),'YYYY-MM-DD');
	</select>
	<select id="todayCencle" resultType="StatisticsVO">
	select sum(op.prod_amount) as prod_cencle
	from order_list ol , pay pa,order_prod op ,user_member um,to_char(ol.order_date,'YYYY-MM-DD') as date_total
	where ol.order_seq = pa.order_seq and ol.order_seq = op.order_seq and ol.user_id = um.user_id 
	and ol.order_status = '주문취소' and date_total = to_char(now(),'YYYY-MM-DD');
	</select>
	
	
	<select id="getExceldata" resultType="StatisticsVO">
	<![CDATA[
	select  ol.order_date,ol.order_seq, ol.user_id , op.prod_code, pd.prod_title, op.prod_amount, pa.pay_use_point, pa.pay_total_money, pa.pay_tool
   	from order_list ol , pay pa ,user_member um , order_prod op, product pd
   	where ol.order_seq = pa.order_seq and ol.user_id = um.user_id and ol.order_seq = op.order_seq and op.prod_code = pd.prod_code and
   	ol.order_status = '구매확정' and ol.order_date >= #{startDate} and ol.order_date <= #{endDate} order by ol.order_date; 
	]]>
	</select>
	
	<select id="salesByLevel" resultType="StatisticsVO">
	<![CDATA[
	select user_level, count(*) as join_count
	from user_member
	group by user_level;
	]]>
	</select>
	
	<select id="salesByTOP" resultType="StatisticsVO">
	<![CDATA[
	select e.*
	from (select 
		  sales_rate*prod_price_sale as total_sum,
		  prod_title,
		  rank() over (order by sales_rate*prod_price_sale desc) "rank"
		  
		  from product
		) e
	where e.rank <=5; 
	]]>
	</select>
	
	<select id="salesByBOTTOM" resultType="StatisticsVO">
	<![CDATA[
	select e.*
	from (select
		  sales_rate*prod_price_sale as total_sum,
		  prod_title,
		  rank() over (order by sales_rate*prod_price_sale asc) "rank"
		  
		  from product
		) e
	where e.rank <=5;
	]]>
	</select>
	<select id="salesByCategory" resultType="StatisticsVO">
	<![CDATA[
	select
  	   to_char(ol.order_date,'YYYY-MM-DD') as date_total, 
	   COALESCE(sum(case when prod_category1='MM' then pa.pay_total_money end), 0)as fineDust_Mask,
	   COALESCE(sum(case when prod_category1='BB' then pa.pay_total_money end), 0)as Splash_Mask,
	   COALESCE(sum(case when prod_category1='SS' then pa.pay_total_money end), 0)as Hand_Sanitizer,
	   COALESCE(sum(case when prod_category1='CC' then pa.pay_total_money end), 0)as CoolPatch,
	   COALESCE(sum(case when prod_category1='HH' then pa.pay_total_money end), 0)as HotPack,
	   COALESCE(sum(case when prod_category1='TT' then pa.pay_total_money end), 0)as thermometer
	from order_list ol , pay pa ,user_member um, order_prod op, product pd
	where ol.order_seq = pa.order_seq and ol.user_id = um.user_id and ol.order_seq = op.order_seq
		and op.prod_code = pd.prod_code and ol.order_status = '구매확정' and ol.order_date >= #{StartDate} and ol.order_date <= #{endDate}
	group by date_total
	order by date_total
	
	]]>
	</select>
	
</mapper>
